{"version":3,"sources":["constants.js","customValue.js","ComponentForProcessingNumericValues.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["valuesUpTo9","0","1","2","3","4","5","6","7","8","9","valuesUpTo9Options","valuesFrom10To19","10","11","12","13","14","15","16","17","18","19","dozens","hundreds","bigNumbersNames","translate","num","val","arrRes","split","arrNum","toString","length","arrStr","splice","join","push","reverse","splitArr","map","itemNum","i","value","SimpleValue","numStr","numStrDozens","Number","bigNumbersNamesFormat","ComponentForProcessingNumericValues","useState","typeValue","setTypeValue","error","setError","figureInWords","setFigureInWords","onClickHandler","Words","includes","className","onChange","e","newValue","currentTarget","onKeyPress","key","placeholder","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07972463.chunk.js","sourcesContent":["export const valuesUpTo9 = {\r\n    0: \"\",\r\n    1: \"один\",\r\n    2: \"два\",\r\n    3: \"три\",\r\n    4: \"четыре\",\r\n    5: \"пять\",\r\n    6: \"шесть\",\r\n    7: \"семь\",\r\n    8: \"восемь\",\r\n    9: \"девять\"\r\n}\r\nexport const valuesUpTo9Options = {\r\n    0: \"\",\r\n    1: \"одна\",\r\n    2: \"две\",\r\n}\r\nexport const valuesFrom10To19 = {\r\n    10: \"десять\",\r\n    11: \"одиннадцать\",\r\n    12: \"двенадцать\",\r\n    13: \"тринадцать\",\r\n    14: \"четырнадцать\",\r\n    15: \"пятнадцать\",\r\n    16: \"шестнадцать\",\r\n    17: \"семнадцать\",\r\n    18: \"восемнадцать\",\r\n    19: \"девятнадцать\"\r\n}\r\n\r\nexport const dozens = {\r\n    0: \"\",\r\n    2: \"двадцать\",\r\n    3: \"тридцать\",\r\n    4: \"сорок\",\r\n    5: \"пятьдесят\",\r\n    6: \"шестьдесят\",\r\n    7: \"семьдесят\",\r\n    8: \"восемьдесят\",\r\n    9: \"девяносто\"\r\n}\r\n\r\nexport const hundreds = {\r\n    0: \"\",\r\n    1: \"сто\",\r\n    2: \"двести\",\r\n    3: \"триста\",\r\n    4: \"четыреста\",\r\n    5: \"пятьсот\",\r\n    6: \"шестьсот\",\r\n    7: \"семьсот\",\r\n    8: \"восемьсот\",\r\n    9: \"девятьсот\",\r\n}\r\nexport const bigNumbersNames = {\r\n    0: [\"\", \"\", \"\"],\r\n    1: [\"тысяча\", \"тысячи\", \"тысяч\"],\r\n    2: [\"миллион\", \"миллиона\", \"миллионов\"],\r\n    3: [\"миллиард\", \"миллиарда\", \"миллиардов\"],\r\n    4: [\"триллион\", \"триллиона\", \"триллионов\"],\r\n    5: [\"квадриллион\", \"квадриллиона\", \"квадриллионов\"],\r\n}\r\n\r\n","import {bigNumbersNames, dozens, hundreds, valuesFrom10To19, valuesUpTo9, valuesUpTo9Options} from \"./constants\";\r\n\r\n\r\n\r\n// разбиваем число в массив типа [ '11', '212', '555'], чтоб понять какой порядок числа\r\n\r\nexport const splitArr = (val) => {\r\n    const arrRes = []\r\n    const split = (num) => {\r\n        const arrNum = num.toString().split(\"\")\r\n\r\n        if (arrNum.length > 3) {\r\n            const arrStr = arrNum.splice(0 - 3).join(\"\");\r\n            arrRes.push(arrStr)\r\n            split(arrNum.join(\"\"))\r\n        } else {\r\n            if (arrNum.length > 0) arrRes.push(arrNum.join(\"\").toString())\r\n            return\r\n        }\r\n    }\r\n    split(val)\r\n    return arrRes.reverse()\r\n}\r\n\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------\r\n\r\n// определяем склонение тысяч, миллионов и и т.д.\r\n\r\nconst bigNumbersNamesFormat = (num, i) => {\r\n\r\n    const numStr = +num[num.length-1]\r\n    const numStrDozens = +(((num.length>1)?num[num.length-2]:\"\") + num[num.length-1])\r\n\r\n    num = Number(num)\r\n    if (num !== 0) {\r\n        if (numStr === 1 && numStrDozens!==11 && numStrDozens!==12) {\r\n            return bigNumbersNames[i][0]\r\n        }\r\n        if (numStr > 1 && numStr < 5 && numStrDozens!==12 && numStrDozens!==13 && numStrDozens!==14) {debugger\r\n            return bigNumbersNames[i][1]\r\n        }\r\n        return bigNumbersNames[i][2]\r\n\r\n    } else {\r\n        return \"\"\r\n    }\r\n};\r\n//-------------------------------------------------------------------------------------------------------------\r\n//перевод трехзначного числа в строку\r\nexport const SimpleValue = (value, i) => {\r\n    if (value.length === 1) {\r\n        value = \"00\" + value\r\n    }\r\n    if (value.length === 2) {\r\n        value = \"0\" + value\r\n    }\r\n    const val = hundreds[+value[0]] + \" \" + (value[1] === \"1\" ?\r\n        valuesFrom10To19[+(value[1] + value[2])]\r\n        : dozens[+value[1]] + \" \"\r\n        + ((i === 1 && +value[2] < 3) ? valuesUpTo9Options[+value[2]] : valuesUpTo9[+value[2]])) // проверяем на склонение (один, два)\r\n    return val\r\n}\r\n//---------------------------------------------------------------------------------------------------------------\r\nexport const translate = (num) => {\r\n    const split = splitArr(num) /*[\"11\" \"111\" \"222\"]*/\r\n    const newArr = split.reverse().map((itemNum, i) => SimpleValue(itemNum, i) + \" \" + bigNumbersNamesFormat(itemNum, i)).reverse()\r\n    return newArr.join(\" \")\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './ComponentForProcessingNumericValues.css';\r\nimport {translate} from \"./customValue\";\r\n\r\nexport function ComponentForProcessingNumericValues() {\r\n\r\n    let [typeValue, setTypeValue] = useState('')\r\n    let [error, setError] = useState(\"\")\r\n    let [figureInWords, setFigureInWords] = useState(\"\")\r\n\r\n    const onChangeHandler = (e) => {\r\n        const newValue = e.currentTarget.value\r\n        setTypeValue(newValue)\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n        const Words = translate(typeValue)\r\n        setError(null)\r\n        setFigureInWords(Words)\r\n\r\n\r\n        if (typeValue.length > 18) {\r\n            setError('Пожалуйста, введите число, содержащее не более 18 символов (квадриллион).')\r\n        }\r\n        if (typeValue.includes('-')) {\r\n            setError('Пожалуйста, введите целое, натуральное, положительное число.')\r\n        }\r\n        if (typeValue.includes('.')) {\r\n            setError('Пожалуйста, введите целое, натуральное, положительное число.')\r\n        }\r\n        if (typeValue.includes(',')) {\r\n            setError('Пожалуйста, введите целое, натуральное, положительное число.')\r\n        }\r\n        if (!Number(typeValue)) {\r\n            setError('Пожалуйста, введите целое, натуральное, положительное число.')\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            onClickHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <header className=\"container\">\r\n            <div className='error'>{error && <div>{error}</div>}</div>\r\n            <input value={typeValue}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className=\"inputType\"\r\n                   placeholder=\"Ведите цифру\"\r\n            />\r\n            <button onClick={onClickHandler} className=\"buttonType\">Результат</button>\r\n            <div>\r\n                {!error && <span className=\"resultType\">Результат: {figureInWords}</span>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {ComponentForProcessingNumericValues} from \"./ComponentForProcessingNumericValues\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ComponentForProcessingNumericValues />\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}